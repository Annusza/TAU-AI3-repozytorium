package com.annusza.tau.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.LinkedList;
import java.util.List;

import org.springframework.stereotype.Component;
import com.annusza.tau.domain.JMBook;


@Component

public class JMBookManagerImpl implements JMBookManager {

	/**
	 * 
	 */
	private Connection connection;

	// private String url = "jdbc:postgresql://localhost:5432/LibraryApp";

	private PreparedStatement addBookStatement;
	private PreparedStatement getAllBooksStatement;
	private PreparedStatement deleteBookStatement;
	private PreparedStatement getBookByIdStatement;
	private PreparedStatement updateBookStatement;

	private PreparedStatement deleteAllBooksStatement;

	public JMBookManagerImpl(Connection connection) throws SQLException {

		this.connection = connection;

		if (!isDatabaseReady()) {
			createTables();
		}

		setConnection(connection);

	}

	public JMBookManagerImpl() throws SQLException {

		this.connection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");

		if (!isDatabaseReady()) {
			createTables();
		}

		this.setConnection(this.connection);
	}

	@Override
	public Connection getConnection() {

		return connection;
	}

	@Override
	public void setConnection(Connection connection) throws SQLException {

		this.connection = connection;
		addBookStatement = connection.prepareStatement("INSERT INTO book (authorName, authorSurname, title, yearOfPublication) VALUES (?, ?, ?, ?)",
				Statement.RETURN_GENERATED_KEYS);
		deleteBookStatement = connection.prepareStatement("DELETE FROM book WHERE id = ?");
		deleteAllBooksStatement = connection.prepareStatement("DELETE FROM book");
		getAllBooksStatement = connection.prepareStatement("SELECT id, authorName, authorSurname, title, yearOfPublication FROM book ORDER BY id");
		getBookByIdStatement = connection.prepareStatement("SELECT id, authorName, authorSurname, title, yearOfPublication FROM book WHERE id = ?");
		updateBookStatement = connection.prepareStatement("UPDATE book SET authorName=?, authorSurname=?, title=?, yearOfPublication=? WHERE id=?");
	}

	private void createTables() throws SQLException {

		connection.createStatement().executeUpdate("CREATE TABLE book (" + "id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1), "
				+ "authorName VARCHAR(70) NOT NULL, " + "authorSurname VARCHAR(100), " + "title VARCHAR(100), " + "yearOfPublication INT )"

		);
	}

	private boolean isDatabaseReady() {

		try {
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("book".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}
			return tableExists;
		} catch (SQLException e) {
			return false;
		}
	}

	@Override
	public int addBook(JMBook bookToCreate) {

		int count = 0;
		try {
			addBookStatement.setString(1, bookToCreate.getAuthorName());
			addBookStatement.setString(2, bookToCreate.getAuthorSurname());
			addBookStatement.setString(3, bookToCreate.getTitle());
			addBookStatement.setInt(4, bookToCreate.getYearOfPublication());
			count = addBookStatement.executeUpdate();
			ResultSet generatedKeys = addBookStatement.getGeneratedKeys();
			if (generatedKeys.next()) {
				bookToCreate.setId(generatedKeys.getInt(1));
			}
		} catch (SQLException e) {
			throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
		}
		return count;
	}

	@Override
	public List<JMBook> getAllBooks() {

		List<JMBook> books = new LinkedList<>();

		try {
			ResultSet rs = getAllBooksStatement.executeQuery();
			while (rs.next()) {
				JMBook jMBook = new JMBook();
				jMBook.setId(rs.getInt("id"));
				jMBook.setAuthorName(rs.getString("authorName"));
				jMBook.setAuthorSurname(rs.getString("authorSurname"));
				jMBook.setTitle(rs.getString("title"));
				jMBook.setYearOfPublication(rs.getInt("yearOfPublication"));

				books.add(jMBook);
			}
		} catch (SQLException e) {
			throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
		}
		return books;
	}

	@Override
	public int deleteBook(JMBook book) {

		try {
			deleteBookStatement.setInt(1, book.getId());
			return deleteBookStatement.executeUpdate();
		} catch (SQLException e) {
			throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
		}
	}

	@Override
	public int updateBook(JMBook bookToUpdate) throws SQLException {

		int count = 0;

		try {
			updateBookStatement.setString(1, bookToUpdate.getAuthorName());
			updateBookStatement.setString(2, bookToUpdate.getAuthorSurname());
			updateBookStatement.setString(3, bookToUpdate.getTitle());
			updateBookStatement.setInt(4, bookToUpdate.getYearOfPublication());
			updateBookStatement.setInt(5, bookToUpdate.getId());
			count = updateBookStatement.executeUpdate();
		} catch (SQLException e) {
			throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
		}

		if (count <= 0) {
			throw new SQLException("Book not found for update");
		}
		return count;
	}

	@Override
	public JMBook getBookById(int id) throws SQLException {

		try {
			getBookByIdStatement.setInt(1, id);
			ResultSet rs = getBookByIdStatement.executeQuery();
			if (rs.next()) {
				JMBook jMBook = new JMBook();

				jMBook.setAuthorName(rs.getString("authorName"));
				jMBook.setAuthorSurname(rs.getString("authorSurname"));
				jMBook.setTitle(rs.getString("title"));
				jMBook.setYearOfPublication(rs.getInt("yearOfPublication"));
				return jMBook;
			}
		} catch (SQLException e) {
			throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
		}
		throw new SQLException("Book with id " + id + " does not exist");
	}

	@Override
	public int deleteAll() {

		try {
			return deleteAllBooksStatement.executeUpdate();
		} catch (SQLException e) {
			throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
		}
	}
}
